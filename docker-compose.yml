version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # ports:
    #   - "5432:5432"
    restart: on-failure
    networks:
      - ft_transcendence
    env_file:
      - .env

  redis:
    image: redis:latest
    container_name: redis
    # ports:
    #   - "6379:6379"
    restart: on-failure
    networks:
      - ft_transcendence
    env_file:
      - .env

  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PRIVATE_BACKEND_API_URL: ${NEXT_PRIVATE_BACKEND_API_URL}
        NEXT_PUBLIC_SERVER_URL: ${NEXT_PUBLIC_SERVER_URL}
        NEXT_PUBLIC_BACKEND_API_URL: ${NEXT_PUBLIC_BACKEND_API_URL}
        NEXT_PUBLIC_BACKEND_API_URL_MEDIA: ${NEXT_PUBLIC_BACKEND_API_URL_MEDIA}
        NEXT_PUBLIC_WEBSOCKET_API_URL: ${NEXT_PUBLIC_WEBSOCKET_API_URL}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    hostname: frontend
    container_name: frontend
    restart: on-failure
    networks:
      - ft_transcendence
    env_file:
      - .env
    # volumes:
    #   - ./frontend/src:/frontend/src
    #   - ./frontend/public:/frontend/public
    #   - /frontend/node_modules
    #   - /frontend/.next

  backend:
    build:
      context: ./backend
    hostname: backend
    container_name: backend
    depends_on:
      - postgres
      - redis
    # ports:
    #   - "8000:8000"
    restart: on-failure
    env_file:
      - .env
    networks:
      - ft_transcendence
    volumes:
      - ./backend:/backend

  nginx:
    build:
      context: ./services/nginx
    hostname: nginx
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - backend
      - frontend
    networks:
      - ft_transcendence
    env_file:
      - .env
    # volumes:
    #   - ./backend/media:/backend/media
    #   - ./backend/staticfiles:/backend/staticfiles


volumes:
  postgres-data:

networks:
  ft_transcendence:
    driver: bridge