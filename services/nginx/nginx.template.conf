events {}

http {

    # Define the MIME types
    include /etc/nginx/mime.types;

    # Default server to handle unmatched requests
    server {
        listen 80 default_server;
        listen 443 ssl default_server;

        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;

        server_name _; # Matches any hostname
        return 444;    # Close the connection without a response
    }

    server {
        listen 443 ssl;
        server_name ${DOMAIN_NAME};

        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;

        location / {
            proxy_pass http://frontend:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            proxy_set_header Host $host;
        }

        location /_next/static/ {
            alias /nextjs_data/;
            try_files $uri $uri/ =404;
        }

        location /backend-media/ {
            alias /media/;
            autoindex off;
            access_log off;
        }

        location /backend-static/ {
            alias /staticfiles/;
            autoindex off;
            access_log off;
        }

        location ~ ^/(ws|backend)/(.*)$ {
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
        }
    }

    server {
        listen 80;
        server_name ${DOMAIN_NAME};

        location / {
            return 301 https://$host$request_uri;
        }
    }
}
